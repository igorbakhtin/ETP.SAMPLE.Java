DEFINE QLOCAL (SAMPLE.APPLICATION_INC.BK) + 
       DEFPSIST(YES) + 
       DESCR('Backout queue for SAMPLE.APPLICATION_INC') +
       MAXDEPTH (100000) +
       USAGE (NORMAL) +
       INITQ ('IQ') PROCESS ('BK_NOTIFY') +
       TRIGGER TRIGTYPE (EVERY) +
       REPLACE;

DEFINE QLOCAL (SAMPLE.APPLICATION_INC) +
       DESCR('Incoming application to SAMPLE from ETP') +
       DEFPSIST(YES) + 
       PUT (ENABLED) +
       GET (ENABLED) +
       MAXDEPTH (100000) +
       USAGE (NORMAL) +
       BOQNAME('SAMPLE.APPLICATION_INC.BK') + 
       BOTHRESH(1) +
       REPLACE;

	   DEFINE QLOCAL (SAMPLE.APPLICATION_OUT.BK) + 
       DEFPSIST(YES) + 
       DESCR('Backout queue for SAMPLE.APPLICATION_OUT') +
       MAXDEPTH (100000) +
       USAGE (NORMAL) +
       INITQ ('IQ') PROCESS ('BK_NOTIFY') +
       TRIGGER TRIGTYPE (EVERY) +
       REPLACE;

DEFINE QLOCAL (SAMPLE.APPLICATION_OUT) +
       DESCR('Outgoing application to ETP  from SAMPLE') +
       DEFPSIST(YES) + 
       PUT (ENABLED) +
       GET (ENABLED) +
       MAXDEPTH (100000) +
       USAGE (NORMAL) +
       BOQNAME('SAMPLE.APPLICATION_OUT.BK') + 
       BOTHRESH(1) +
       REPLACE;
	   
DEFINE QLOCAL (SAMPLE.STATUS_OUT.BK) + 
       DEFPSIST(YES) + 
       DESCR('Backout queue for SAMPLE.STATUS_OUT') +
       MAXDEPTH (100000) +
       USAGE (NORMAL) +
       INITQ ('IQ') PROCESS ('BK_NOTIFY') +
       TRIGGER TRIGTYPE (EVERY) +
       REPLACE;

DEFINE QLOCAL (SAMPLE.STATUS_OUT) +
       DESCR('Outgoing status from SAMPLE to ETP') +
       DEFPSIST(YES) + 
       PUT (ENABLED) +
       GET (ENABLED) +
       MAXDEPTH (100000) +
       USAGE (NORMAL) +
       BOQNAME('SAMPLE.STATUS_OUT.BK') + 
       BOTHRESH(1) +
       REPLACE;

	   DEFINE QLOCAL (SAMPLE.STATUS_INC.BK) + 
       DEFPSIST(YES) + 
       DESCR('Backout queue for SAMPLE.STATUS_INC') +
       MAXDEPTH (100000) +
       USAGE (NORMAL) +
       INITQ ('IQ') PROCESS ('BK_NOTIFY') +
       TRIGGER TRIGTYPE (EVERY) +
       REPLACE;

DEFINE QLOCAL (SAMPLE.STATUS_INC) +
       DESCR('Incoming status from ETP to SAMPLE  ') +
       DEFPSIST(YES) + 
       PUT (ENABLED) +
       GET (ENABLED) +
       MAXDEPTH (100000) +
       USAGE (NORMAL) +
       BOQNAME('SAMPLE.STATUS_INC.BK') + 
       BOTHRESH(1) +
       REPLACE;



DEFINE CHANNEL(CLNT.SAMPLE.SVRCONN) CHLTYPE(SVRCONN) TRPTYPE(TCP) MCAUSER('sample') REPLACE;
SET AUTHREC OBJTYPE(QMGR) GROUP('sample') AUTHADD(CONNECT, INQ, DSP);
SET AUTHREC OBJTYPE(QUEUE) PROFILE(SAMPLE.APPLICATION_INC) GROUP('sample') AUTHADD(DSP,INQ,GET);
SET AUTHREC OBJTYPE(QUEUE) PROFILE(SAMPLE.APPLICATION_INC.BK) GROUP('sample') AUTHADD(DSP,INQ,PUT,PASSALL);
SET AUTHREC OBJTYPE(QUEUE) PROFILE(SAMPLE.APPLICATION_OUT) GROUP('sample') AUTHADD(DSP,INQ,PUT);
SET AUTHREC OBJTYPE(QUEUE) PROFILE(SAMPLE.APPLICATION_OUT.BK) GROUP('sample') AUTHADD(DSP,INQ,PUT,PASSALL);
SET AUTHREC OBJTYPE(QUEUE) PROFILE(SAMPLE.STATUS_INC) GROUP('sample') AUTHADD(DSP,INQ,GET);
SET AUTHREC OBJTYPE(QUEUE) PROFILE(SAMPLE.STATUS_INC.BK) GROUP('sample') AUTHADD(DSP,INQ,PUT,PASSALL);
SET AUTHREC OBJTYPE(QUEUE) PROFILE(SAMPLE.STATUS_OUT) GROUP('sample') AUTHADD(DSP,INQ,PUT);
SET AUTHREC OBJTYPE(QUEUE) PROFILE(SAMPLE.STATUS_OUT.BK) GROUP('sample') AUTHADD(DSP,INQ,PUT,PASSALL);

SET AUTHREC OBJTYPE(QUEUE) PROFILE(SYSTEM.DOTNET.XARECOVERY.QUEUE) GROUP('sample') AUTHADD(DSP,INQ,PUT,GET,PASSALL,BROWSE);
SET AUTHREC OBJTYPE(QUEUE) PROFILE(SYSTEM.DEFAULT.MODEL.QUEUE) GROUP('sample') AUTHADD(DSP,GET);
SET AUTHREC OBJTYPE(QUEUE) PROFILE(SYSTEM.ADMIN.COMMAND.QUEUE) GROUP('sample') AUTHADD(DSP,PUT);

REFRESH SECURITY(*);